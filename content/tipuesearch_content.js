var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite \n', 'tags': '', 'url': 'About.html'}, {'title': 'weekly progress', 'text': '', 'tags': '', 'url': 'weekly progress.html'}, {'title': 'w1~4', 'text': '建立帳號與網站 \n 利用已經帶有 Brython 執行環境的倉儲, 在設定學員 Github Classroom 首次作業時, 即經由 template 置入, 因此學員只要: \n 利用學校 email 帳號, 建立 Github 帳號, 以英文姓名縮寫加上一組數字, 選擇最短帳號名稱 例如: jfk40723199, jfk 為其自選的姓名縮寫, 而隨後則加上各自的學號. \n 擁有 Github 帳號後, 即可透過 Github Classroom assignment 連結取得作業倉儲, 自行在倉儲中設定 Github Pages 後, 即可啟用作業網站 (以下 \xa0 所謂 網站均指靜態網站 \xa0 , 而用來編輯網站內容的 動態網站, 則統稱為網際內容編輯器 , 使用動態網站的目的在編輯靜態網站的內容). 網站內容經過編輯之後, 必須建立新的網站內容 (使用 generate_pages), 然後將新的網站內容更新到對應的 Github 倉儲中 (稱為改版, 其過程經歷 git add, git commit 與 git push 等階段). \n git 為分散式版次管理系統工具. \n git add \n git commit \n git push \n 採用 Github Classroom 建立作業倉儲的問題: \n 2023/09/26 在 1a w3 課程進行到建立各學員 site 作業時發現, 將 Replit 導入 Github 倉儲的流程中, 所產生的系統間權限設定, 必須由 Github Classroom 管理帳號 (以 cp2023 為例, 附屬在 mdecp2023 帳號下), 針對各用戶所提出的個別 Replit 權限 requests (以 site-scrum-1 倉儲為例, 只能透過 Replit 提出控管 mdecp2023/site-scrum-1 倉儲的權限) \xa0 逐一進行設定 . \n \n (上圖顯示共有三名用戶針對 mdecp2023 帳號下的 Github Classroom 倉儲提出 Replit 連線要求, 其中只有最上方用戶的 request 取得 mdecp2023/site-scrum-1 倉儲的維護權限, 其餘兩則 requests 則仍處於待審核階段. 意即若要讓各用戶整合 Replit, \xa0 每一個 Github Classroom 作業, 管理者都必須手動處理超過兩百則的 requests ) \n 為去除管理者的手動設定負擔, 決定 2023 cp 與 cad 等課程將放棄使用 Github Classroom. 改為由各學員自行針對課程建立用來評分的課程倉儲與網站 (cp 課程建立 cp2023 倉儲, cad 課程則建立 cad2023 倉儲), 直接附屬在學員的 Github 帳號下, 後續的 submodule 設定與倉儲協同權限則統一由各學員自行負責 \n \n \n \n \n', 'tags': '', 'url': 'w1~4.html'}, {'title': 'w5', 'text': '要先在replit.nix新增程式庫 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n \n \n \n { pkgs }: { \n \xa0\xa0\xa0\xa0 deps = [ \n \xa0\xa0\xa0\xa0\xa0\xa0 pkgs.gnuplot \n \xa0\xa0\xa0\xa0\xa0\xa0 pkgs.ncurses.dev \n \xa0\xa0\xa0\xa0\xa0\xa0 pkgs.gd \n \xa0\xa0\xa0\xa0 ]; \n } \n \n \n \n \n \n \n \n 曲線圖程式與圖片 \n // 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n   \n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n   \n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n   \n    return 0;\n}\n \n \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n \nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    draw_roc_flag(img);\n \n    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n \nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n    int sun_radius = (int)(width/8);\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n    int white_circle_dia = sun_radius;\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;\n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n    // 根據畫布大小塗上紅色長方形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 先設法以填色畫出六個白色堆疊菱形\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n \n}\n \nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位\n    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度\n    float deg = M_PI/180;\n    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度\n    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小\n    float sr = sun_radius/tan(75*deg);\n    int ax, ay, bx, by, dx, dy, ex, ey;\n    gdPoint points[4];\n    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // AB\n    gdImageLine(img, ax, ay, bx, by, color);\n    // BE\n    gdImageLine(img, bx, by, ex, ey, color);\n    // ED\n    gdImageLine(img, ex, ey, dx, dy, color);\n    // DA\n    gdImageLine(img, dx, dy, ax, ay, color);\n    */\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域\n    for (int i=1;i<=6;i++){\n    // A\n    points[0].x = ax+sun_radius*sin(30*deg*i);\n    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);\n    // B\n    points[1].x = bx+sr-sr*cos(30*deg*i);\n    points[1].y = by-sr*sin(30*deg*i);\n    // E\n    points[2].x = ex-sun_radius*sin(30*deg*i);\n    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));\n    // D\n    points[3].x = dx-(sr-sr*cos(30*deg*i));\n    points[3].y = dy+sr*sin(30*deg*i);\n    // 對菱形區域範圍塗色\n    gdImageFilledPolygon(img, points, 4, color);\n    // 在菱形區域外圍畫線, 明確界定菱形範圍\n    gdImagePolygon(img, points, 4, color);\n    }\n} \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n \nint main() {\n    int width = 800;\n    int height = (int)(width / 1.9);\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    draw_usa_flag(img);\n \n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n \n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n \n    return 0;\n}\n \nvoid draw_usa_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 国旗颜色\n    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹\n    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形\n \n    int stripe_height = height / 13;\n    int stripe_width = width;\n    int star_size = (int)(0.0308 * height); // 星星大小\n \n    for (int y = 0; y < height; y += stripe_height) {\n        if (y / stripe_height % 2 == 0) {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n        } else {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n        }\n    }\n \n    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n \n    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距\n    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距\n    int star_start_x = (int)(0.125 * height); // 星星的起始X位置\n    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置\n \n    for (int row = 0; row < 9; row++) {\n        int starsPerRow = (row % 2 == 0) ? 6 : 5;\n \n        // 计算2、4、6和8排星星的偏移量\n        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\n \n        for (int star = 0; star < starsPerRow; star++) {\n            int x = star_start_x + star * star_spacing_x + offset_x;\n \n            // 旋转角度（以弧度为单位）\n            double rotation_angle = M_PI / 5; // 忘記多少度的旋转\n \n            int y = star_start_y + row * star_spacing_y;\n            draw_star(img, x, y, star_size, white, rotation_angle);\n        }\n    }\n}\n \nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n \n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;\n        int radius = (i % 2 == 0) ? size : size / 2;\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y + radius * sin(angle);\n    }\n \n    // 用指定的颜色填充星星\n    gdImageFilledPolygon(img, points, 10, color);\n} \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_japan_flag(gdImagePtr img);\nvoid draw_red_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    int originalWidth = 1200;\n    int originalHeight = (int)(originalWidth * 2.0 / 3.0);\n    gdImagePtr img = gdImageCreateTrueColor(originalWidth, originalHeight);\n    gdImageAlphaBlending(img, 0);\n\n    draw_japan_flag(img);\n\n    // 新的宽度和高度以适应 "images" 文件夹\n    int newWidth = 600;\n    int newHeight = (int)(newWidth * 2.0 / 3.0);\n\n    // 创建新图像并进行缩放\n    gdImagePtr resizedImage = gdImageCreateTrueColor(newWidth, newHeight);\n    gdImageAlphaBlending(resizedImage, 0);\n    gdImageCopyResampled(resizedImage, img, 0, 0, 0, 0, newWidth, newHeight, originalWidth, originalHeight);\n\n  FILE *outputFile = fopen("./../images/japan_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePng(resizedImage, outputFile);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    gdImageDestroy(resizedImage);\n\n    return 0;\n}\n\nvoid draw_japan_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n\n    // 创建一个白色背景\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    gdImageFilledRectangle(img, 0, 0, width - 1, height - 1, white);\n\n    // 绘制红色圆圈（太阳）\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int center_x = width / 2;\n    int center_y = height / 2;\n    int radius = (int)((width * 2) / 3);\n    draw_red_sun(img, center_x, center_y, radius, red);\n}\n\nvoid draw_red_sun(gdImagePtr img, int x, int y, int size, int color) {\n  // 減小 size 的值,例如將他的值減半\n  size = size / 2;\n    gdImageArc(img, x, y, size, size, 0, 360, color);\n    gdImageFillToBorder(img, x, y, color, color);\n} \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_chinese_flag(gdImagePtr img);\n \nint main() {\n    int width = 300; // 國旗寬度\n    int height = 200; // 國旗高度\n \n    gdImagePtr im = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(im, 0);\n \n    draw_chinese_flag(im);\n \n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n \n    gdImagePngEx(im, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(im);\n \n    return 0;\n}\n \n// 声明 draw_star 函数\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n \nvoid draw_chinese_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, yellow;\n \n    // 國旗顏色\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n \n    // 畫紅色背景\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n \n    // 設置星星的大小和位置\n    int star_size = (int)(0.28 * height);\n    int star_x = (int)(0.165 * width);\n    int star_y = (int)(0.265 * height);\n \n    // 畫大星星\n    draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n \n    // 繪製小星星，位置根據實際國旗比例計算\n    double radius = 0.15 * height;\n    double angle = 360 / 7 * M_PI / 179.0;\n    double rotation = -M_PI / 7.5;\n    int cx = (int)(0.32 * width);\n    int cy = (int)(0.27 * height);\n \n    for (int i = -1; i < 3; i++) {\n        int x = (int)(cx + radius * cos(i * angle + rotation));\n        int y = (int)(cy + radius * sin(i * angle + rotation));\n        draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n    }\n}\n \nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n \n    // 计算星形的五个外点和五个内点\n    double outer_radius = size / 2;\n    double inner_radius = size / 6;\n    double angle = M_PI / 5.0;\n \n    for (int i = 0; i < 10; i++) {\n        double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n        double theta = rotation_angle + i * angle;\n        points[i].x = x + radius * cos(theta);\n        points[i].y = y + radius * sin(theta);\n    }\n \n    // 使用 gdImageFilledPolygon 绘制星形\n    gdImageFilledPolygon(img, points, 10, color);\n} \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n \nint main() {\n    // 设置国旗的宽和高\n    int width = 1200;\n    int height = width / 2;\n \n    // 创建图像\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    // 绘制英国国旗\n    draw_uk_flag(img);\n \n    // 将图像保存到文件\n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时发生错误。\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n \n \n \nvoid draw_uk_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n \n    int red, white, blue;\n    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色\n \n    gdImageFilledRectangle(img, 0, 0, width, height, blue);\n \n \n  int x1, y1, x2, y2, x3, y3;\n  {\n    int line_thickness = 100;\n    gdImageSetThickness(img, line_thickness);\n \n    int x1, y1, x2, y2, x3, y3;\n \n    // 绘制白色斜线\n    x1 = 0;\n    y1 = 600;\n    x2 = 1200;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, white);\n \n    x1 = 0;\n    y1 = 0;\n    x2 = 1200;\n    y2 = 600;\n    gdImageLine(img, x1, y1, x2, y2, white);\n}\n  {\n    int line_thickness = 33;\n    gdImageSetThickness(img, line_thickness);\n \n \n    // 绘制红色斜线\n    x1 = 566;\n    y1 = 300;\n    x2 = 1166;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n \n    x1 = 1233;\n    y1 = 600;\n    x2 = 633;\n    y2 = 300;\n    gdImageLine(img, x1, y1, x2, y2, red);\n \n    x1 = 566;\n    y1 = 300;\n    x2 = -33;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n \n    x1 = 600;\n    y1 = 316.5;\n    x2 = 0;\n    y2 = 616.5;\n    gdImageLine(img, x1, y1, x2, y2, red);\n  }\n  {\n  int line_thickness = 33;\n  gdImageSetThickness(img, line_thickness);\n \n  int x1, y1, x2, y2, x3, y3;\n \n  // 绘制  斜线\n  x1 = 0;\n  y1 = 600;\n  x2 = 1200;\n  y2 = 0;\n  gdImageLine(img, x1, y1, x2, y2, red );\n \n \n  x1 = 1200;\n    y1 = 16.5;\n    x2 = 600;\n    y2 = 316.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n \n \n  x1 = 0;\n    y1 = 583.5;\n    x2 = 600;\n    y2 = 283.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n \n \n  }\n \n    // 绘制白色十字\n    int cross_width = width / 32;\n    int cross_arm_width = width / 32;\n    int center_x = width / 2;\n    int center_y = height / 2;\n \n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n \n    // 绘制红色十字\n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': 'Map: site map 網站所有頁面 \n \n EditA: edit all pages, 使用時機為(1)解決多人共用網站時的衝突, 或(2)刪除特定頁面 \n Edit: edit one page, 先選頁面, 再選 Edit 然後才能進入編輯模式 \n Config: 編輯網站標題, 若要編輯 site title, 必須更改 init.py 中的 site_title 字串內容 \n Search: 頁面資料 html 原始碼內容搜尋 \n IUpload: image upload, 影像檔案上傳, 資料會放入 images 目錄中 \n IList: image file list, 列出存在 images 目錄下的影像檔案 \n FUpload: file upload, 一般檔案上傳功能, 資料會放入 downloads 目錄中 \n FList: file list, 列出位於 downloads 目錄下的檔案 \n Logout: 登出 \n Convert: 將 config/content.htm 經過分頁程式處理後, 轉為 content 目錄下的超文件 \n \n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w9', 'text': '2b w8 作業: 請根據\xa0 cad2023_2b_w8.txt \xa0檔案中的內容, 透過程式的讀取與篩選, 按照時間先後, 列出 2b 修課學員中已經登入 s1511.cycu.org 的學號. (修課學員名單\xa02a:\xa0 0838 , 2b:\xa0 0851 ) \n 假如在近端處理, 必須同時儲存兩個檔案後, 進行資料選取: \n get_stud_num_from_last_data.py \xa0(若採 Brython 編寫, 可以直接 列出結果 , 依照登入時間先後排序, 其中 41123227 為管理者最早測試時登入, 若採用 ANSI 編寫: \xa0 c_parse_last_cp2023.7z ) \n read_last_final1.c 原始碼: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n 89 \n \n \n \n #include <stdio.h> \n #include <string.h> \n \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 // Open the user file for reading \n \xa0\xa0\xa0\xa0 FILE * user_file =  fopen ( "2b_user_list.txt" ,  "r" ); \n \xa0\xa0\xa0\xa0 if   (user_file == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 perror ( "Error opening user file" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 char   line[100];  // Assuming a maximum line length of 100 characters \n \xa0 \n \xa0\xa0\xa0\xa0 char   valid_users[100][20];  // Assuming a maximum of 100 valid users with a length of 20 characters each \n \xa0\xa0\xa0\xa0 int   valid_user_count = 0; \n \xa0 \n \xa0\xa0\xa0\xa0 // Read and store the student numbers from the user file \n \xa0\xa0\xa0\xa0 while   ( fgets (line,  sizeof (line), user_file)) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 line[ strcspn (line,  "\\n" )] =  \'\\0\' ;  // Remove the newline character \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 strcpy (valid_users[valid_user_count], line); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 valid_user_count++; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Close the user file \n \xa0\xa0\xa0\xa0 fclose (user_file); \n \xa0 \n \xa0\xa0\xa0\xa0 // Open the CAD file for reading \n \xa0\xa0\xa0\xa0 FILE * cad_file =  fopen ( "cad2023_2b_w8.txt" ,  "r" ); \n \xa0\xa0\xa0\xa0 if   (cad_file == NULL) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 perror ( "Error opening CAD file" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 char   unique_users[100][20];  // Assuming a maximum of 100 unique users with a length of 20 characters each \n \xa0\xa0\xa0\xa0 int   unique_user_count = 0; \n \xa0 \n \xa0\xa0\xa0\xa0 // Read the CAD file line by line \n \xa0\xa0\xa0\xa0 while   ( fgets (line,  sizeof (line), cad_file)) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 char * token =  strtok (line,  " " );  // Split the line by space \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (token != NULL &&  strstr (token,  "cad" ) == token) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Extract the student number (skip "cad") \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 char   student_number[20];  // Assuming a maximum length of 20 characters for a student number \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 strcpy (student_number, token + 3);  // Skip "cad" \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Check if the student number is in the list of valid users and not a duplicate \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   is_valid = 0; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   ( int   i = 0; i < valid_user_count; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   ( strcmp (valid_users[i], student_number) == 0) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 is_valid = 1; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 break ; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Add the student number to the unique_users list if it\'s valid and not a duplicate \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (is_valid) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 int   is_duplicate = 0; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   ( int   i = 0; i < unique_user_count; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   ( strcmp (unique_users[i], student_number) == 0) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 is_duplicate = 1; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 break ; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (!is_duplicate) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 strcpy (unique_users[unique_user_count], student_number); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 unique_user_count++; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Reverse the order of the unique student numbers \n \xa0\xa0\xa0\xa0 for   ( int   i = 0; i < unique_user_count / 2; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 char   temp[20]; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 strcpy (temp, unique_users[i]); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 strcpy (unique_users[i], unique_users[unique_user_count - 1 - i]); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 strcpy (unique_users[unique_user_count - 1 - i], temp); \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Print the unique student numbers in reverse order \n \xa0\xa0\xa0\xa0 for   ( int   i = 0; i < unique_user_count; i++) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 printf ( "%s\\n" , unique_users[i]); \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Close the CAD file \n \xa0\xa0\xa0\xa0 fclose (cad_file); \n \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n \n \n \n \n \n 若採用 Python 編寫: \n read_last.py 原始碼 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n \n \n \n # 讀取學號檔案 \n with  open ( "2b_user_list.txt" ,  \'r\' ) as user_file: \n \xa0\xa0\xa0\xa0 user_lines  =   user_file.read().splitlines() \n \xa0 \xa0 \n # 讀取 last 指令轉出的檔案, 以 last -w > cad2023_2b_w8.txt 建立檔案 \n with  open ( "cad2023_2b_w8.txt" ,  \'r\' ) as cad_file: \n \xa0\xa0\xa0\xa0 # 以下是利用跳行符號, 將每一行區隔成數列 \n \xa0\xa0\xa0\xa0 cad_lines  =   cad_file.read().splitlines() \n #print(cad_lines) \n \xa0 \xa0 \n # 從 cad_lines 建立所有登入使用者數列 \n login_users  =   [] \n for   i  in   cad_lines: \n \xa0\xa0\xa0\xa0 line_list  =   i.split( " " ) \n \xa0\xa0\xa0\xa0 login_users.append(line_list[ 0 ]) \n #print(login_users) \n \xa0 \xa0 \n # 根據 https://stackoverflow.com/questions/480214/how-do-i-remove-duplicates-from-a-list-while-preserving-order \n # 數列去除重複元素但仍保持原始次序 \n login_users  =   list ( dict .fromkeys(login_users)) \n #print(login_users) \n \xa0 \xa0 \n # 建立數列存放符合條件的使用者 \n valid_users  =   [] \n \xa0 \xa0 \n # 取出符合條件的使用者 \n for   line  in   login_users: \n \xa0\xa0\xa0\xa0 if   "cad"   in   line: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 將 cad 字串去除 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 user_number  =   line.replace( "cad" , "") \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   user_number  in   user_lines: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 valid_users.append(user_number) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n # 利用 reverse() 將 valid_users 反向排序 \n valid_users.reverse() \n \xa0 \xa0 \n # , 最早登入者列在最前面 \n for   user  in   valid_users: \n \xa0\xa0\xa0\xa0 print (user) \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w9.html'}, {'title': 'w12', 'text': '', 'tags': '', 'url': 'w12.html'}, {'title': 'helloworld', 'text': '\n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n \n \n \n #include <stdio.h> \n \xa0 \n int   main() \n { \n \xa0\xa0\xa0\xa0 printf ( "hello world\\n" ); \n } \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'helloworld.html'}, {'title': 'GD繪圖程式1', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nint main() {\n    int width = 800;\n    int height = 600;\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n \nfprintf(stderr, "Error opening the output file.\\n");\n \nreturn 1;\n    }\n    \n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n    \n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n    \n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n \n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n \n \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \n// Declare the rotation function\nvoid rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {\n    int i;\n    double angle_rad = rotation_ang * M_PI / 180.0;\n \n    for (i = 0; i < num_points; i++) {\n        int x = points[i].x - x_orig;\n        int y = points[i].y - y_orig;\n \n        points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));\n        points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));\n    }\n}\n \nint main() {\n    int width = 800;\n    int height = 600;\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    FILE *outputFile = fopen("./../images/hellogd2.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n \n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n \n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue);\n \n    gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);\n    gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);\n    gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue);\n \n    gdPoint points[4];\n    points[0].x = (int)width / 4;\n    points[0].y = (int)height * 3 / 4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n \n    // Call the rotation function multiple times\n    for (int i = 0; i < 4; i++) {\n        rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 30.0, points, 4);\n        gdImagePolygon(img, points, 4, black);\n    }\n \n    gdPoint points2[4];\n    points2[0].x = (int)width / 3;\n    points2[0].y = (int)height / 2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n \n    // Call the rotation function multiple times\n    for (int i = 0; i < 12; i++) {\n        //rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);\n        rotateFilledPolygon(500, 200, 30.0, points2, 4);\n        gdImageFilledPolygon(img, points2, 4, red);\n    }\n \n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n \n    return 0;\n} \n \n \n \n', 'tags': '', 'url': 'GD繪圖程式1.html'}, {'title': 'W13', 'text': '\xa0 在計算機程式課程中，我獲得了豐富的學習經驗。 這門課程深入介紹了程式設計的基本概念和實際應用， 讓我計算機程式有了更深刻的理解。 \n \xa0 首先，課程強調了程式語言的重要性，我學到了多種語言， 包括Python與C++。這不僅擴大了我的對程式設計視野， 還讓我能夠更靈活地應對不同的問題和場景。在每個語言中， 我學會了許多撰寫程式 的基本技能。  \n \xa0 其次， \xa0在小組合作中，我與同學們分享了想法， 討論了不同的解決方案。這種合作氛圍拓寬了我的思維， 讓我從不同的角度看待問題，也提高了我的團隊合作和溝通能力。 \n \xa0 綜上所述，計算機程式課程不僅豐富了我的專業知識， 還培養了我的邏輯思維和解難能力。這門課程不僅是我的學術收獲， 更是我在程式設計領域邁出重要的一步。 我期待將這些學到的技能應用到未來的項目中， 並持續追求在程式設計領域的進一步成長。 \n', 'tags': '', 'url': 'W13.html'}, {'title': 'w15', 'text': '\n', 'tags': '', 'url': 'w15.html'}, {'title': 'Brython', 'text': "https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Filename:  .py   \n \n \n \n Run   Output   清除輸出區 清除繪圖區 Reload \n \n \n \n \n \n \n \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n \n \n \n \n \n \n \n \n Filename:  .py   \n \n \n \n Run   Output   清除輸出區 清除繪圖區 Reload \n \n \n \n \n \n \n", 'tags': '', 'url': 'Brython.html'}, {'title': 'setup', 'text': '利用隨身碟中的批次檔案, 設定所需的網路環境. \n cadlab_network_setup.7z \n 納入個別學員所分配到的 IPv6 固定網址設定: \xa0 2023_fall_cadlab_network_setup.7z \n 1_network_setup.bat (需要管理者身分執行, 才能關閉 IPv4 網路, 啟動 IPv6 網路) \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n \n \n \n echo "disable ipv4 and setup proxy for ipv6" \n SET CurrentDir=%~dp0 \n %windir%\\system32\\reg.exe import %CurrentDir%1_2023_cadlab_network_setup.reg \n powershell -executionpolicy bypass -File %CurrentDir%1_disable_ipv4.ps1 \n rem mstsc /admin /v:your_server \n exit \n \n \n \n \n \n \n \n 其中包含以下兩個設定檔案: \n 1_2023_cadlab_network_setup.reg 用於關閉自動 Proxy 搜尋, 開啟手動設定 Proxy server. \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n \n \n \n Windows Registry Editor Version 5.00 \n \xa0 \n \xa0 [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings] \n \xa0 ; disable AutoDetect \n "AutoDetect" =dword:00000000 \n "MigrateProxy" =dword:00000001 \n ; enable Proxy \n "ProxyEnable" =dword:00000001  \n "ProxyHttp1.1" =dword:00000000  \n "ProxyServer" = "http://[2001:288:6004:17::4]:3128" \n "ProxyOverride" = "localhost;192.168.1.0/24;<local>" \n \n \n \n \n \n \n \n 1_disable_ipv4.ps1 用於關閉 IPv4 網路協定, 開啟 IPv6 網路協定. \n 對 ChatGPT 提問: \n powershell "Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip Enable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6"可以關閉 IPv4 網路, 開啟 IPv6, 如何同時設定 IPv6 所使用的兩台 DNS servers? \n 原先設定: \n \n \n \n \n \n \n 1 \n 2 \n \n \n \n Disable-NetAdapterBinding -Name  "*"   -ComponentID ms_tcpip \n Enable-NetAdapterBinding -Name  "*"   -ComponentID ms_tcpip6 \n \n \n \n \n \n \n \n 修改後的 1_disable_ipv4.ps1 Powershell 設定檔案: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n \n \n \n # 關閉 IPv4 網路 \n Disable-NetAdapterBinding -Name  "*"   -ComponentID ms_tcpip \n \xa0 \n # 啟用 IPv6 網路 \n Enable-NetAdapterBinding -Name  "*"   -ComponentID ms_tcpip6 \n \xa0 \n # 設置 IPv6 網路中的兩個 DNS 伺服器 (hinet) \n $dnsServers =  "2001:b000:168::1" ,  "2001:b000:168::2" \n Set-DnsClientServerAddress -InterfaceAlias  "*"   -ServerAddresses $dnsServers \n \n \n \n \n \n \n \n 對 ChatGPT 提問: \n the following powershell script can setup windows network connection "# 關閉 IPv4 網路 Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip \xa0 # 啟用 IPv6 網路 Enable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6 \xa0 # 設置 IPv6 網路中的兩個 DNS 伺服器 (hinet) $dnsServers = "2001:b000:168::1", "2001:b000:168::2" Set-DnsClientServerAddress -InterfaceAlias "*" -ServerAddresses $dnsServers" what if the ipv6 address need set to 2001:288:6004:17:1234::1234 and subnet prefix as 64 and ipv6 gateway as 2001:288:6004:17::254 \n 可以得到下列回應答案: \n 加上個別學員所分配到的 IPv6 固定網址設定後的 1_disable_ipv4.ps1 Powershell 設定檔案 (必須自行更改固定 Ipv6 位址): \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n \n \n \n # 關閉 IPv4 網路 \n Disable-NetAdapterBinding -Name  "*"   -ComponentID ms_tcpip \n \xa0\xa0 \xa0 \n # 啟用 IPv6 網路 \n Enable-NetAdapterBinding -Name  "*"   -ComponentID ms_tcpip6 \n \xa0\xa0 \xa0 \n # 設置 IPv6 網路中的兩個 DNS 伺服器 (hinet) \n $dnsServers =  "2001:b000:168::1" ,  "2001:b000:168::2" \n Set-DnsClientServerAddress -InterfaceAlias  "*"   -ServerAddresses $dnsServers \n \xa0 \n \xa0 \n # 設定 IPv6 固定位址 (fixed address), 子網路首碼長度 (subnet prefix) 與網路預設閘道 (gateway) 等三個變數 \n $ipv6Address =  "2001:288:6004:17:請使用個人所分配到的 IPv6 位址" \n $subnetPrefixLength = 64 \n $gateway =  "2001:288:6004:17::254" \n \xa0 \xa0 \n # 參考 https://serverfault.com/questions/427234/getting-network-interface-device-name-in-powershell \n $query =  "SELECT * FROM Win32_NetworkAdapter WHERE Manufacturer != \'Microsoft\' AND NOT PNPDeviceID LIKE \'ROOT\\\\%\'" \n $interfaces = Get-WmiObject -Query $query | Sort index \n $interfaces | ForEach{ \n \xa0\xa0\xa0\xa0 $friendlyname = $_ | ForEach-Object { $_.NetConnectionID } \n \xa0\xa0\xa0\xa0 New-NetIPAddress -AddressFamily  "IPv6"   -InterfaceAlias $friendlyname -IPAddress $ipv6Address -PrefixLength $subnetPrefixLength -DefaultGateway $gateway \n } \n \xa0 \n \xa0 \xa0 \n # 列出所使用的 IPv6 網路通訊協定內容 \n Write-Host  "IPv6 Address: $ipv6Address/$subnetPrefixLength" \n Write-Host  "IPv6 Gateway: $gateway" \n \n \n \n \n \n \n \n 下載 \xa0 2023_fall_w7_cadlab_network_setup.7z \xa0 (需要下載密碼), 必須先放入個人所分配到的 IPv6 位址後, 以管理者身分執行批次檔案, 就能直接完成電腦輔助設計室中電腦的網路連線設定. \n 各學員所分配的固定 IPv6 位址如下: \n 1a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cba:: 班級名單序號 \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cbb:: 班級名單序號 \n', 'tags': '', 'url': 'setup.html'}, {'title': 'C_lib', 'text': '本課程針對 C 程式語言的教學將使用下列程式庫: \n gnuplot: \xa0 https://github.com/gnuplot/gnuplot \n 數值分析繪圖程式庫 \xa0 - 在機電設計流程中, 工程師運用數值分析法進行設計與模擬運算後, 將數據存檔, 可利用 gnuplot 繪圖指令, 以令人容易理解的圖形呈現數值分析結果. \n 範例: \n euler_gnuplot_msd_ex1.c \n 執行結果: \n \n \n \n gd: \xa0 https://github.com/libgd/libgd \n 泛用繪圖程式庫 - 工程師在產品開發或製造程序中, 可利用線條(例如: 特殊齒輪外型)、字串(例如: 製造日期或保固訊息)或塗色區域(特定標誌、二維條碼或 QRCode)進行一般標誌或圖像繪圖. \n 範例: \n gd_ex1.c \n 執行結果: \n \xa0 gd_ex1.png \n \xa0 gd_ex1.jpg \n \n raylib: \xa0 https://github.com/raysan5/raylib \n raygui: \xa0 https://github.com/raysan5/raygui \n https://www.raylib.com/cheatsheet/raylib_cheatsheet_v4.0.pdf \n 電玩程式庫 - 工程師可將機電流程中與產品設計或製造程序有關的系統, 透過與使用者互動呈現逼真的模擬過程或結果, 也可用來開發與機電系統有關的虛擬整合套件(例如: 透過與實體感測器或影像辨識系統結合, 將實時運動競賽中的運動員動作與虛擬實境或擴增實境系統結合), 也可用來 開發電動遊戲 ( raylib-games ). \n 下載 \xa0 Tiny C Compiler with gd and raylib 程式庫.7z \xa0 (需要下載密碼) \n 範例: \n move_red_dot.c \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n \n \n \n /******************************************************************************************* \n * \n *\xa0\xa0 raylib [core] example - Keyboard input \n * \n *\xa0\xa0 Example originally created with raylib 1.0, last time updated with raylib 1.0 \n * \n *\xa0\xa0 Example licensed under an unmodified zlib/libpng license, which is an OSI-certified, \n *\xa0\xa0 BSD-like license that allows static linking with closed source software \n * \n *\xa0\xa0 Copyright (c) 2014-2023 Ramon Santamaria (@raysan5) \n * \n ********************************************************************************************/ \n // move_red_dot.c \n /* on Replit, add pkgs.raylib to replit.nix \n \xa0\xa0\xa0 use cc move_red_dot.c -lraylib to compile and link \n use ./a.out to execute and move the red dot with arrow keys \n */ \n // on Portable system, use cc=tcc.exe -run -lgd -lraylib to run \n \xa0 \n #include "raylib.h" \n \xa0 \n //------------------------------------------------------------------------------------ \n // Program main entry point \n //------------------------------------------------------------------------------------ \n int   main( void ) \n { \n \xa0\xa0\xa0\xa0 // Initialization \n \xa0\xa0\xa0\xa0 //-------------------------------------------------------------------------------------- \n \xa0\xa0\xa0\xa0 const   int   screenWidth = 800; \n \xa0\xa0\xa0\xa0 const   int   screenHeight = 450; \n \xa0 \n \xa0\xa0\xa0\xa0 InitWindow(screenWidth, screenHeight,  "raylib [core] example - keyboard input" ); \n \xa0 \n \xa0\xa0\xa0\xa0 Vector2 ballPosition = { ( float )screenWidth/2, ( float )screenHeight/2 }; \n \xa0 \n \xa0\xa0\xa0\xa0 SetTargetFPS(60);\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0  // Set our game to run at 60 frames-per-second \n \xa0\xa0\xa0\xa0 //-------------------------------------------------------------------------------------- \n \xa0 \n \xa0\xa0\xa0\xa0 // Main game loop \n \xa0\xa0\xa0\xa0 while   (!WindowShouldClose())\xa0\xa0\xa0  // Detect window close button or ESC key \n \xa0\xa0\xa0\xa0 { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Update \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 //---------------------------------------------------------------------------------- \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (IsKeyDown(KEY_RIGHT)) ballPosition.x += 2.0f; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (IsKeyDown(KEY_LEFT)) ballPosition.x -= 2.0f; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (IsKeyDown(KEY_UP)) ballPosition.y -= 2.0f; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (IsKeyDown(KEY_DOWN)) ballPosition.y += 2.0f; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 //---------------------------------------------------------------------------------- \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // Draw \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 //---------------------------------------------------------------------------------- \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 BeginDrawing(); \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ClearBackground(RAYWHITE); \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 DrawText( "move the ball with arrow keys" , 10, 10, 20, DARKGRAY); \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 DrawCircleV(ballPosition, 50, MAROON); \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 EndDrawing(); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 //---------------------------------------------------------------------------------- \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // De-Initialization \n \xa0\xa0\xa0\xa0 //-------------------------------------------------------------------------------------- \n \xa0\xa0\xa0\xa0 CloseWindow();\xa0\xa0\xa0\xa0\xa0\xa0\xa0  // Close window and OpenGL context \n \xa0\xa0\xa0\xa0 //-------------------------------------------------------------------------------------- \n \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n \n \n \n \n \n 在 Replit 與近端程式環境執行結果: \n 啟動後以鍵盤方向鍵上下左右控制紅點. \n \n', 'tags': '', 'url': 'C_lib.html'}, {'title': 'replit', 'text': 'https://docs.replit.com/ \n w8: 為了強化保全, Replit 目前只能透過 Gmail 或 Github 帳號登入, 無法直接利用帳號與密碼登入. \n 請注意: 原本 Replit Python 3.8 虛擬環境的目錄為 venv, 但是 Python 3.10 虛擬環境的目錄已經改用 .pythonlibs, 因此倉儲若不希望帶著此一虛擬環境檔案, 則可以將 .pythonlibs 附加到 .gitignore \n 另外在近端必須處理 Python 3.12.0 版本中的\xa0 https://docs.python.org/3/library/ssl.html \xa0 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n \n \n \n httpd.socket  =   ssl.wrap_socket(httpd.socket, \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ^^^^^^^^^^^^^^^ \n AttributeError: module  \'ssl\'   has no attribute  \'wrap_socket\' \n \n \n \n \n \n \n \n 將 GitHub cmsimde 倉儲導入 Replit 的方法, 請參考\xa0 https://mde.tw/cadnote/content/Replit.html \xa0中的說明. \n 備註：建立 yengm (at gm.nfu) 帳號, for Replit \xa0 Teams for Education . \n 在 Replit C 程式環境中額外納入 gnuplot 套件的 replit.nix 設定: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n \n \n \n { pkgs }: { \n \xa0\xa0\xa0\xa0 deps = [ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pkgs.sudo \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pkgs.clang_12 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pkgs.ccls \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pkgs.gdb \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pkgs.gnumake \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pkgs.gnuplot \n \xa0\xa0\xa0\xa0 ]; \n } \n \n \n \n \n \n \n \n C with gnuplot: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n \n \n \n #include <stdio.h> \n \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 // Open a file to write displacement and velocity data \n \xa0\xa0\xa0\xa0 FILE   *outputFile =  fopen ( "motion_data.txt" ,  "w" ); \n \xa0\xa0\xa0\xa0 if   (!outputFile) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Failed to create data file.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file \n \xa0\xa0\xa0\xa0 double   x = 0.2;\xa0  // Initial displacement \n \xa0\xa0\xa0\xa0 double   v = 0.0;\xa0  // Initial velocity \n \xa0\xa0\xa0\xa0 double   dt = 0.01;  // Time step \n \xa0\xa0\xa0\xa0 double   t = 0.0;\xa0  // Time \n \xa0 \n \xa0\xa0\xa0\xa0 while   (t <= 10.0) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double   acceleration = (-10.0 * x - 0.5 * v) / 1.0;  // Modified system parameters here \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 v += acceleration * dt; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 x += v * dt; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (outputFile,  "%lf %lf %lf\\n" , t, x, v); \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 t += dt; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Close the data file \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0 \n \xa0\xa0\xa0\xa0 // Start a Gnuplot process using popen \n \xa0\xa0\xa0\xa0 FILE   *gnuplotPipe = popen( "gnuplot -persistent" ,  "w" ); \n \xa0\xa0\xa0\xa0 if   (!gnuplotPipe) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Failed to start Gnuplot.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Use Gnuplot plotting commands, specify font and output as PNG \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set output \'motion_plot.png\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set title \'Displacement and Velocity vs. Time\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set xlabel \'Time (s)\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set ylabel \'Displacement (m)\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe, "plot  \'motion_data.txt\'   using   1:2 with lines lw 2 title  \'Displacement\' , \\ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \'motion_data.txt\'   using   1:3 with lines lw 2 title  \'Velocity\' \\n"); \n \xa0 \n \xa0\xa0\xa0\xa0 // Close the Gnuplot process \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "exit\\n" ); \n \xa0\xa0\xa0\xa0 pclose(gnuplotPipe); \n \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n \n \n \n \n \n 在選擇 Python 作為 Language 的 repl 專案中, cc 已經內建, 若要加裝 gnuplot 套件則可在 replit.nix 設定檔案中加入 pkgs. gnuplot , pkgs. ncurses .dev, pkgs. gd , pkgs. vim HugeX 與 pkgs. raylib : \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n \n \n \n { pkgs }: { \n \xa0\xa0\xa0\xa0 deps = [ \n \xa0\xa0\xa0\xa0\xa0\xa0 pkgs.gnuplot \n \xa0\xa0\xa0\xa0\xa0\xa0 pkgs.ncurses.dev \n \xa0\xa0\xa0\xa0\xa0\xa0 pkgs.gd \n \xa0\xa0\xa0\xa0\xa0\xa0 pkgs.vimHugeX \n \xa0\xa0\xa0\xa0\xa0\xa0 pkgs.raylib \n \xa0\xa0\xa0\xa0 ]; \n } \n \n \n \n \n \n \n \n gnuplot: 數值分析繪圖程式庫 \n gd: 泛用型繪圖程式庫 \n ncurses: 文字型類 GUI 程式庫 \n vim: 指令模式編輯器 \n raylib: 電動遊戲程式庫 \n \n \n', 'tags': '', 'url': 'replit.html'}]};